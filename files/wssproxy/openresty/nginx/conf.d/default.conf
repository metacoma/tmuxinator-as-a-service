init_worker_by_lua_block {
  socket = require 'socket'
  local uuid = require 'resty.jit-uuid'
  uuid.seed()

  RANGE_FILE="/proc/sys/net/ipv4/ip_local_port_range"


  get_port_range = function()
  	local file = io.open(RANGE_FILE, "r")
  	local file_data = file:read "*a"
  	
  	local parsed_data = string.gmatch(file_data, "[^%s]+")
  	lower_port = parsed_data()
  	upper_port = parsed_data()
  
  	file:close()
  
  	return lower_port, upper_port
  end

  get_unused_port = function(from_port, to_port)
    port = -1
	  local sock = socket.tcp()
    if (sock == nil) then
      ngx.log(ngx.ERR, "failed to create new tcp socket")
      return port
    end
	  for _port = from_port, to_port do
      ngx.log(ngx.ERR, "Check port " .. port)
		  local ok, err = sock:bind("0.0.0.0", port)
      ok = 1
		  if ok then
        ngx.log(ngx.ERR, "Found unused port " .. port)
        port = _port
        break
		  end
      ngx.log(ngx.ERR, "failed to bind tcp socket, port " .. port .. " err" .. err)
      
	  end
	  sock:close()
    lower_port = port
    ngx.log(ngx.ERR, "Unused port " .. port)
	  return port
end

    lower_port, upper_port = get_port_range()

}

server {
    listen       80;
    server_name  localhost;

    set $template_root /usr/local/openresty/nginx/conf/template;

    location ~ ^/ttyd/(?<port>[0-9]+)/(?<ttyd_uri>.*)$ {
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass http://127.0.0.1:$port/$ttyd_uri;
    }

    location /api/v1 {
      lua_need_request_body on;
      content_by_lua_block {
        local router = require "router"
        local r = router.new()

        r:match({
          GET = {
            ["/api/v1/status"] = function(params)
                ngx.say(encodeJSON({
                  status = "OK",
                }))
            end
          },
          GET = {
            ["/api/v1/port"] = function(params)
                --local d, u = get_port_range() 
                --local p = get_unused_port(d, u)
                ngx.say(encodeJSON({
                  u = u,
                  d = d,
                  p = tonumber(lower_port)
                }))
                lower_port = lower_port + 1
            end
          },
        })
        local ok, errmsg = r:execute(
          ngx.var.request_method,
          ngx.var.request_uri,
          ngx.req.get_uri_args(),  -- all these parameters
          ngx.req.get_post_args(), -- will be merged in order
          {other_arg = 1})         -- into a single "params" table
        if ok then
          ngx.status = 200
        else
          ngx.status = 404
          ngx.say("Not found!")
        end
      }
    }

    location / {
        root   /usr/local/openresty/nginx/html;
        index  index.html index.htm;
    }
}
